// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  SUCCESSED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  fullName         String
  password         String
  verified         Boolean           @default(false)
  role             UserRole          @default(USER)
  phone            String?
  provider         String?
  providerId       String?
  cart             Cart?
  order            Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, email])
}

model Category {
  id       String    @id @unique @default(uuid())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String        @id @unique @default(uuid())
  name        String
  imageUrl    String
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?
  ingredients Ingredient[]
  productItem ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id        String    @id @unique @default(uuid())
  price     Int
  size      Int?
  pizzaType Int?
  product   Product?  @relation(fields: [productId], references: [id])
  productId String
  cartItem  CartItem?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       String     @id @unique @default(uuid())
  name     String
  price    Int
  imageUrl String
  product  Product[]
  cartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          String     @id @unique @default(uuid())
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @unique
  token       String     @unique
  totalAmount Int        @default(0)
  cartItem    CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id            String       @id @unique @default(uuid())
  quantity      Int
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId String       @unique
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        String
  ingredients   Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @unique @default(uuid())
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @unique
  token     String
  status    OrderStatus @default(PENDING)
  paymentId String?
  items     Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id     String @id @unique @default(uuid())
  code   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
}
